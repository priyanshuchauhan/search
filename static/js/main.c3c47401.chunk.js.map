{"version":3,"sources":["components/Query.js","utils/constants.js","utils/apiUtil.js","styles/AppStyles.js","components/Form.js","components/Profile/Profile.js","components/GitSearch.js","App.js","serviceWorker.js","index.js","components/QueryList.js","logo.svg"],"names":["React","require","module","exports","props","className","title","paragraph","style","padding","display","textAlign","target","href","link","gitURL","GET","getShipmentReport","a","page","id","limit","queryString","getShipmentReporttDI","fetch","method","data","requestURL","requestObject","headers","body","JSON","stringify","then","response","json","Title","styled","h1","section","Form","state","querySearch","handleSearch","event","setState","value","noSpaceText","replace","axios","get","params","action","datatype","search","origin","resp","onInput","margin","width","this","onChange","type","placeholder","required","aria-hidden","Component","Profile","src","image","alt","username","List","repos","map","repo","key","ListItem","button","component","html_url","ListItemText","primary","name","GitSearch","searched","loading","onFormSubmit","e","avatar_url","preventDefault","res","repos_url","catch","onUsernameChange","marginTop","process","REACT_APP_NAME","alignItems","onSubmit","TextField","flex","label","Button","App","useState","currentPage","setShipmentData","setData","useEffect","shipmentList","path","rel","queryResult","rawData","searchResult","index","query","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","Query"],"mappings":"iGAAA,IAAIA,EAAQC,EAAQ,GAcpBC,EAAOC,QAZO,SAACC,GACb,OACE,uBAAKC,UAAU,UACb,uBAAKA,UAAU,UACb,0BAAKD,EAAME,OACX,uBAAKD,UAAU,QAAQD,EAAMG,WAC7B,qBAAGC,MAAO,CAACC,QAAS,eAAgBC,QAAS,QAASC,UAAU,SAAUC,OAAO,SAASC,KAAMT,EAAMU,MAAtG,wB,qHCPKC,EAAM,UADC,wBACD,QAENC,EAAM,MCMNC,EAAiB,uCAAG,8CAAAC,EAAA,6DAAOC,EAAP,+BAAc,EAAGC,EAAjB,+BAAsB,KAAMC,EAA5B,+BAAoC,GAC/DC,EAD2B,eACLH,EADK,mBACUE,GACrCD,IACFE,EAAW,UAAMA,EAAN,eAAwBF,IAHN,kBAKxBG,EAAqBC,MAAOR,EAAKM,IALT,2CAAH,qDAkBvB,SAAeC,EAAtB,kC,4CAAO,WAAoCC,GAApC,iCAAAN,EAAA,6DAA2CO,EAA3C,+BAAoDT,EAAKU,EAAzD,+BAAgE,GAQjEC,EAAaZ,EACXa,EAAgB,CACpBH,SACAI,QAAS,CACP,eAAgB,qBAGhBJ,IAAWT,EACbW,EAAU,UAAMA,EAAN,YAAoBD,GAE9BE,EAAcE,KAAOC,KAAKC,UAAUN,GAlBjC,SAoBQF,EAAMG,EAAYC,GAAeK,KAAjC,uCACX,WAAMC,GAAN,SAAAhB,EAAA,sEAAwBgB,EAASC,OAAjC,mFADW,uDApBR,oF,2SCzBA,IAAMC,EAAQC,IAAOC,GAAV,K,GAMKD,IAAOE,QAAV,K,8ECuCLC,E,kDA3Cb,WAAYpC,GAAQ,IAAD,8BACjB,cAAMA,IACDqC,MAAQ,CAAEC,YAAa,IAC5B,EAAKC,aAAe,SAACC,GACnB,EAAKC,SAAS,CAAEH,YAAaE,EAAMhC,OAAOkC,QAC1C,IAAIC,EAAcH,EAAMhC,OAAOkC,MAAME,QAAQ,KAAM,OAC9CD,EAILE,IACGC,IADH,qCAC6C,CACzCC,OAAQ,CACNC,OAAQ,aACRC,SAAU,OACVhC,MAAO,GACPiC,OAAQP,EACRQ,OAAQ,OAGXtB,MAAK,SAACuB,GACL,EAAKpD,MAAMqD,QAAQD,EAAK9B,SAd1B,EAAKtB,MAAMqD,QAAQ,OAPN,E,qDA0BjB,OACE,8BACE,2BACEjD,MAAO,CAAEkD,OAAQ,WAAYC,MAAO,OACpCb,MAAOc,KAAKnB,MAAMC,YAClBmB,SAAUD,KAAKjB,aACfmB,KAAK,OACLC,YAAY,cACZC,UAAQ,IAEV,uBAAG3D,UAAU,eAAe4D,cAAY,SAT1C,sC,GA5BajE,IAAMkE,W,2BCCV,SAASC,EAAQ/D,GAC9B,OACE,yBAAKC,UAAU,WACb,yBAAK+D,IAAKhE,EAAMiE,MAAOC,IAAG,qBAAgBlE,EAAMmE,YAChD,4BAAKnE,EAAMmE,UACX,kBAACC,EAAA,EAAD,KAEIpE,EAAMqE,MAAMC,KAAI,SAACC,EAAMC,GACrB,OACE,kBAACC,EAAA,EAAD,CACEC,QAAM,EACNC,UAAU,IACVlE,KAAM8D,EAAKK,SACXpE,OAAO,UACPgE,IAAKA,GAEL,kBAACK,EAAA,EAAD,CAAcC,QAASP,EAAKQ,a,+BCwE7BC,E,4MApFb3C,MAAQ,CACN8B,SAAU,GACVF,MAAO,GACPgB,UAAU,EACVZ,MAAO,GACPa,SAAS,G,EAGXC,aAAe,SAACC,GAOd,IAAIC,EANJD,EAAEE,iBAEF,EAAK7C,SAAS,CACZyC,SAAS,IAKXrC,IAAMC,IAAN,uCAA0C,EAAKT,MAAM8B,WACpDtC,MAAK,SAAA0D,GAEJ,OADAF,EAAaE,EAAIjE,KAAK+D,WACfxC,IAAMC,IAAIyC,EAAIjE,KAAKkE,cAE3B3D,MAAK,SAAA0D,GACJ,EAAK9C,SAAS,CACZyC,SAAS,EACTb,MAAOkB,EAAIjE,KACX2C,MAAOoB,EACPJ,UAAU,OAGbQ,OAAM,WACL,EAAKhD,SAAS,CACZyC,SAAS,Q,EAKfQ,iBAAmB,SAAAN,GACjB,EAAK3C,SAAS,CACZwC,UAAU,EACVd,SAAUiB,EAAE5E,OAAOkC,S,uDAKrB,OACE,yBAAKzC,UAAU,OACb,yBAAKA,UAAU,iBACb,wBAAIG,MAAO,CAAEuF,UAAW,IAAOC,6HAAYC,gBAC3C,0BACEzF,MAAO,CAAE0F,WAAY,WAAYxF,QAAS,QAC1CyF,SAAUvC,KAAK2B,cAEf,kBAACa,EAAA,EAAD,CACE5F,MAAO,CAAE6F,KAAM,GACfxC,SAAUD,KAAKkC,iBACfhC,KAAK,OACLwC,MAAM,+BAER,kBAACC,EAAA,EAAD,CAAQzC,KAAK,UAAb,WAIAF,KAAKnB,MAAM6C,QACP,kBAAC,IAAD,CAAQ9E,MAAO,CAAEE,QAAS,QAASgD,OAAQ,eAC3C,KAIJE,KAAKnB,MAAM4C,UAEP,kBAAClB,EAAD,CACEI,SAAUX,KAAKnB,MAAM8B,SACrBF,MAAOT,KAAKnB,MAAM4B,MAClBI,MAAOb,KAAKnB,MAAMgC,c,GA3EZP,a,iBC8DTsC,MA1Df,WAAgB,IAAD,EACyBC,mBAAS,GADlC,mBACNC,EADM,aAE2BD,mBAAS,KAFpC,mBAEQE,GAFR,aAGWF,mBAAS,IAHpB,mBAGN/E,EAHM,KAGAkF,EAHA,KAgCb,OA3BAC,qBAAU,YAER,uCAAC,4BAAA3F,EAAA,sEAC4BD,EAAkByF,GAD9C,QACOI,EADP,SAEiBH,EAAgBG,GAFjC,2CAAD,yDAIC,CAACJ,IAsBF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,KAAK,uBACV,mDAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,yBAAK1G,UAAU,aACX,+CACA,kBAAC+B,EAAD,4CACF,uBACExB,OAAO,SAASoG,IAAI,sBACpBnG,KAAK,gDAEL,uBAAGR,UAAU,eAAe4D,cAAY,UAE1C,kBAAC,EAAD,CAAMR,QAzBK,SAACwD,GACpB,GAAoB,OAAhBA,EAAJ,CAIA,IAfqBC,EAefC,GAfeD,EAecD,GAdpB,GAAGvC,KAAI,SAAUpE,EAAO8G,GACrC,MAAO,CACL9G,MAAOA,EACPC,UAAW2G,EAAQ,GAAGE,GACtBtG,KAAMoG,EAAQ,GAAGE,OAWrBR,EAAQO,QAJNP,EAAQ,OAwBF,kBAAC,IAAD,CAAWS,MAAO3F,IAClB,kBAAC,EAAD,WCjDQ4F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhG,MAAK,SAAAiG,GACjCA,EAAaC,iB,mBErInB,IAAInI,EAAQC,EAAQ,GAChBmI,EAAQnI,EAAQ,KAWpBC,EAAOC,QATW,SAACC,GAEjB,OACE,uBAAKC,UAAU,QACZD,EAAMiH,MAAM3C,KAAI,SAAA2C,GAAK,OAAI,gBAACe,EAAD,eAAOxD,IAAKyC,EAAM/G,OAAW+G,U,6ECP7DnH,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.c3c47401.chunk.js","sourcesContent":["var React = require('react');\r\n\r\nconst Query = (props) => {\r\n  return (\r\n    <div className='result'>\r\n      <div className='bubble'>\r\n        <h2>{props.title}</h2>\r\n        <div className=\"text\">{props.paragraph}</div>\r\n        <a style={{padding: '0px 10px 5px', display: 'block', textAlign:'right'}} target=\"_blank\" href={props.link}>See full article</a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nmodule.exports = Query;\r\n","export const baseURL = `http://localhost:3000`\r\nexport const gitURL = `${baseURL}/git`\r\n\r\nexport const GET = 'GET'\r\nexport const POST = 'POST'\r\nexport const PATCH = 'PATCH'","import { gitURL, GET, PATCH } from \"./constants\";\r\n// import apiMock from \"./mockAPIData\";\r\n\r\n/**\r\n * Factory function to inject fetch dependency for testing\r\n *\r\n * @param {String} page for pagination\r\n * @returns {Promise} API call promise\r\n */\r\nexport const getShipmentReport = async (page = 1, id = null, limit = 20) => {\r\n  let queryString = `page=${page}&_limit=${limit}`\r\n  if (id) {\r\n    queryString = `${queryString}&id=${id}`\r\n  }\r\n  return getShipmentReporttDI(fetch, GET, queryString)\r\n}\r\n\r\nexport const updateShipmentData = async (data = {}) =>\r\n  getShipmentReporttDI(fetch, PATCH, data);\r\n\r\n/**\r\n * Function to make async call to get shipment details\r\n *\r\n * @param {function} fetch Dependency Injection for testing\r\n * @param {String} page for pagination\r\n * @returns {Promise} API call promise\r\n */\r\nexport async function getShipmentReporttDI(fetch, method = GET, data = {}) {\r\n  /* Used to to deploy to github pages\r\n    const promise = new Promise((resolve, reject) => {\r\n      resolve(apiMock.shipments);\r\n    });\r\n    return promise;\r\n  */\r\n\r\n  let requestURL = gitURL;\r\n  const requestObject = {\r\n    method,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n  if (method === GET) {\r\n    requestURL = `${requestURL}?${data}`;\r\n  } else {\r\n    requestObject.body = JSON.stringify(data);\r\n  }\r\n  return await fetch(requestURL, requestObject).then(\r\n    async response => await response.json()\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 1.5em;\r\n  text-align: center;\r\n  color: palevioletred;\r\n`;\r\n\r\nexport const Wrapper = styled.section`\r\n  padding: 1.5em;\r\n  background: papayawhip;\r\n`;\r\n\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Form extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { querySearch: \"\" };\r\n    this.handleSearch = (event) => {\r\n      this.setState({ querySearch: event.target.value });\r\n      let noSpaceText = event.target.value.replace(/\\s/, \"%20\");\r\n      if (!noSpaceText) {\r\n        this.props.onInput(null);\r\n        return;\r\n      }\r\n      axios\r\n        .get(`https://en.wikipedia.org/w/api.php`, {\r\n          params: {\r\n            action: \"opensearch\",\r\n            datatype: \"json\",\r\n            limit: 15,\r\n            search: noSpaceText,\r\n            origin: \"*\",\r\n          },\r\n        })\r\n        .then((resp) => {\r\n          this.props.onInput(resp.data);\r\n        });\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <form>\r\n        <input\r\n          style={{ margin: \"10px 0px\", width: \"75%\" }}\r\n          value={this.state.querySearch}\r\n          onChange={this.handleSearch}\r\n          type=\"text\"\r\n          placeholder=\"Search here\"\r\n          required\r\n        />\r\n        <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n        Dropdown search by stack trace\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n// import material-ui components\r\nimport { List, ListItem, ListItemText } from '@material-ui/core';\r\n\r\nexport default function Profile(props) {\r\n  return (\r\n    <div className=\"profile\">\r\n      <img src={props.image} alt={`Profile of ${props.username}`} />\r\n      <h2>{props.username}</h2>\r\n      <List>\r\n        {\r\n          props.repos.map((repo, key) => {\r\n            return (\r\n              <ListItem\r\n                button\r\n                component=\"a\"\r\n                href={repo.html_url}\r\n                target=\"__blank\"\r\n                key={key}\r\n              >\r\n                <ListItemText primary={repo.name} />\r\n              </ListItem>\r\n            )\r\n          })\r\n        }\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// import custom components\r\nimport Profile from './Profile/Profile';\r\n// import material-ui components\r\nimport { TextField, Button, CircularProgress as Loader } from '@material-ui/core';\r\n\r\nclass GitSearch extends Component {\r\n  state = {\r\n    username: '',\r\n    image: '',\r\n    searched: false,\r\n    repos: [],\r\n    loading: false\r\n  }\r\n\r\n  onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      loading: true\r\n    });\r\n\r\n    var avatar_url;\r\n\r\n    axios.get(`https://api.github.com/users/${this.state.username}`)\r\n    .then(res => {\r\n      avatar_url = res.data.avatar_url;\r\n      return axios.get(res.data.repos_url);\r\n    })\r\n    .then(res => {\r\n      this.setState({\r\n        loading: false,\r\n        repos: res.data,\r\n        image: avatar_url,\r\n        searched: true\r\n      });\r\n    })\r\n    .catch(() => {\r\n      this.setState({\r\n        loading: false\r\n      });\r\n    });\r\n  }\r\n\r\n  onUsernameChange = e => {\r\n    this.setState({\r\n      searched: false,\r\n      username: e.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"formContainer\">\r\n          <h1 style={{ marginTop: 0 }}>{ process.env.REACT_APP_NAME }</h1>\r\n          <form\r\n            style={{ alignItems: \"flex-end\", display: \"flex\" }}\r\n            onSubmit={this.onFormSubmit}\r\n          >\r\n            <TextField\r\n              style={{ flex: 1 }}\r\n              onChange={this.onUsernameChange}\r\n              type=\"text\"\r\n              label=\"Enter a Github username...\"\r\n            />\r\n            <Button type=\"submit\">Search</Button>\r\n          </form>\r\n\r\n          {\r\n            this.state.loading\r\n              ? <Loader style={{ display: \"block\", margin: \"15px auto\" }} />\r\n              : null\r\n          }\r\n\r\n          {\r\n            this.state.searched\r\n              && (\r\n                <Profile\r\n                  username={this.state.username}\r\n                  image={this.state.image}\r\n                  repos={this.state.repos}\r\n                />\r\n              )\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GitSearch;\r\n","import React, { useState, useEffect } from \"react\";\nimport { getShipmentReport } from \"./utils/apiUtil\";\nimport { Title } from \"./styles/AppStyles\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport GitSearch from \"./components/GitSearch\";\nimport QueryList from \"./components/QueryList\";\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [shipmentData, setShipmentData] = useState([]);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    // Using an async function makes the callback function return a Promise instead of a cleanup function. Hence IIFE\n    (async function anyNameFunction() {\n      const shipmentList = await getShipmentReport(currentPage);\n      shipmentList && setShipmentData(shipmentList);\n    })();\n  }, [currentPage]);\n\n  const normalizeData = (rawData) => {\n    return rawData[1].map(function (title, index) {\n      return {\n        title: title,\n        paragraph: rawData[2][index],\n        link: rawData[3][index],\n      };\n    });\n  };\n\n  const addNewResult = (queryResult) => {\n    if (queryResult === null) {\n      setData([]);\n      return;\n    }\n    const searchResult = normalizeData(queryResult);\n    setData(searchResult);\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/search-details/:id\">\n          <div>your search page </div>\n        </Route>\n        <Route path=\"/\">\n          <div className=\"container\">\n              <h1>Iluvatar Search</h1>\n              <Title>Programmer Search Engine vicicita !</Title>\n            <a\n              target=\"_blank\" rel=\"noopener noreferrer\"\n              href=\"https://en.wikipedia.org/wiki/Special:Random\"\n            >\n              <i className=\"fa fa-random\" aria-hidden=\"true\"></i>\n            </a>\n            <Form onInput={addNewResult} />\n            <QueryList query={data} />\n            <GitSearch />\n          </div>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var React = require('react');\r\nvar Query = require('./Query');\r\n\r\nconst QueryList = (props) => {\r\n  let count = 0;\r\n  return (\r\n    <div className='list'>\r\n      {props.query.map(query => <Query key={query.title} {...query} />)}\r\n    </div>\r\n  )\r\n}\r\n\r\nmodule.exports = QueryList;\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}